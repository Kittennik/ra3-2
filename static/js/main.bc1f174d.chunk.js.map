{"version":3,"sources":["components/ItemList.js","components/Listing.js","App.js","serviceWorker.js","index.js"],"names":["ItemList","props","item","title","length","slice","currency","USD","EUR","classQuantity","quantity","className","classnames","href","url","src","MainImage","url_570xN","alt","currency_code","price","Listing","items","map","state","key","listing_id","defaultProps","App","etsy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6/hFAIe,SAASA,EAASC,GAAQ,IAC/BC,EAASD,EAATC,KACFC,EAAQD,EAAKC,MAAMC,OAAS,GAApB,UAA4BF,EAAKC,MAAME,MAAM,EAAG,IAAhD,OAA2DH,EAAKC,MACxEG,EAAW,CACfC,IAAK,IACLC,IAAK,UAGHC,EAAgB,aAEhBP,EAAKQ,UAAY,GACnBD,EAAgB,YACPP,EAAKQ,UAAY,KAC1BD,EAAgB,gBAGlB,IAAME,EAAYC,IAAW,gBAAiBH,GAE9C,OACE,oCACE,yBAAKE,UAAU,cACb,uBAAGE,KAAMX,EAAKY,KACZ,yBAAKC,IAAKb,EAAKc,UAAUC,UAAWC,IAAKhB,MAG7C,yBAAKS,UAAU,gBACb,uBAAGA,UAAU,cAAcR,GAC3B,uBAAGQ,UAAU,cAAcL,EAASJ,EAAKiB,eAAiBb,EAASJ,EAAKiB,eAAiBjB,EAAKiB,cAA9F,IAA8GjB,EAAKkB,OACnH,uBAAGT,UAAWA,GAAYT,EAAKQ,SAA/B,WC5BO,SAASW,EAAQpB,GAAQ,IAC9BqB,EAAUrB,EAAVqB,MAER,OAAKA,EAAMlB,OAKT,yBAAKO,UAAU,aACZW,EAAMC,KAAI,SAACrB,GAAD,MAA0B,YAAfA,EAAKsB,MAAsB,KAC/C,yBAAKC,IAAKvB,EAAKwB,WAAYf,UAAU,QACnC,kBAACX,EAAD,CAAUE,KAAMA,SAPf,KAaXmB,EAAQM,aAAe,CACrBL,MAAO,ICXMM,MANf,WACE,OACE,kBAACP,EAAD,CAASC,MAAOO,KCKAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc1f174d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport default function ItemList(props) {\n  const { item } = props;\n  const title = item.title.length > 50 ? `${item.title.slice(0, 50)}...` : item.title;\n  const currency = {\n    USD: '$',\n    EUR: 'â‚¬',\n  };\n\n  let classQuantity = 'level-high';\n\n  if (item.quantity <= 10) {\n    classQuantity = 'level-low';\n  } else if (item.quantity <= 20) {\n    classQuantity = 'level-medium';\n  }\n\n  const className = classnames('item-quantity', classQuantity);\n\n  return (\n    <>\n      <div className=\"item-image\">\n        <a href={item.url}>\n          <img src={item.MainImage.url_570xN} alt={item}/>\n        </a>\n      </div>\n      <div className=\"item-details\">\n        <p className=\"item-title\">{title}</p>\n        <p className=\"item-price\">{currency[item.currency_code] ? currency[item.currency_code] : item.currency_code} {item.price}</p>\n        <p className={className}>{item.quantity} left</p>\n      </div>\n    </>\n  );\n}\n\nItemList.propTypes = {\n  item: PropTypes.object,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ItemList from './ItemList';\n\nexport default function Listing(props) {\n  const { items } = props;\n\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <div className=\"item-list\">\n      {items.map((item) => (item.state === 'removed' ? null : (\n        <div key={item.listing_id} className=\"item\">\n          <ItemList item={item} />\n        </div>)))}\n    </div>\n  );\n}\n\nListing.defaultProps = {\n  items: [],\n};\n\nListing.propTypes = {\n  items: PropTypes.array,\n};\n","import React from 'react';\nimport './App.css';\nimport etsy from './etsy.json';\nimport Listing from './components/Listing';\n\nfunction App() {\n  return (\n    <Listing items={etsy} />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}